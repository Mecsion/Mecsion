list1=[54,36,75,28,50]

print("在尾部插入元素42后，列表为")
#使用append方法在尾部插入元素
list1.append(42)
print(list1)

#在28前面插入元素46
print("在28前面插入元素46后，列表为")
list1.insert(3,46)
print(list1)

#删除并输出元素28
tmp=list1.pop(4)
print("删除并输出的元素为:")
print(tmp)

#将列表按降序排列
list1.sort(reverse=True)
print("列表按降序排列后为")
print(list1)
list1.sort()

#将列表按升序排列
print("列表按升序排列后为")
print(list1)
print("列表已清空")

#创建空列表
squares=[]
#输出1-100整数的平方
for i in range(1,101):
    squares.append(i*i)
print(squares)

#依次添加1-100内能被3整除的数
triples=[]
for m in range(3,100,3):
        triples.append(m)
print(triples)

#合并两个字符串
squars_and_triples=squares+triples
print(squars_and_triples)



Acceptance_Rate=[57.5,56.8,57.7,62.9,69.3,72.4,75.5,76.2,74.3,74.1]
sum=0.00
for i in Acceptance_Rate:
    sum+=i
print("十年的平均录取率为：")
average=sum/len(Acceptance_Rate)
print(sum/len(Acceptance_Rate))
Max_value=max(Acceptance_Rate)
maxIndex=Acceptance_Rate.index(Max_value)
print("录取率最高的年份为%d",2013+maxIndex)
high_years=[]
for i in Acceptance_Rate:
    if i > average:
        high_years.append(Acceptance_Rate.index(i)+2013)
print("超出平均录取率的年份有：")
for i in high_years:
    print(i)



#五个菜品分别为a,b,c,d,e
menu=("蒸羊羔","蒸熊掌","蒸鹿尾儿","烧花鸭","烧雏鸡")
print("五个菜品分别为：")
for i in menu:
    print(i)

#元组属于只读类型，无法修改结构
print("python不会让我修改元组的内容")

#这里定义一个函数，三个参数分别为新菜品的索引、旧的元组菜单、和新菜品的名称。
def newMenu(index,array,text):
    arple=list(array)
    arple[index]=text   #将元组改为列表后，就可以增删改查啦。
    choice=input("是否修改完毕？yes/no:")#如果要新添加一个菜还不够，就回复“no”。注意，在控制台输入的时候，“no”的引号也必须加入，不然要报错。

    while choice=="no":
        newIndex = int(input("新菜品的序号为："))
        newText=input("新菜品的名称为：")
        arple[newIndex] = newText
        choice = input("是否修改完毕？yes/no:")

    if choice=="yes":
        for i in arple:
            print(i)
newMenu(0,menu,"爆炒腰花")






2023.11.2
import random
class desktop:
    def __init__(self,length,width,height):
        self.length=length
        self.width=width
        self.height=height

    def showinfo(self):
        print('length:',self.length,'width:',self.width,'height:',self.height)


desktop1=desktop(8,8,8)
desktop1.showinfo()
desktop2=desktop(7,7,7)
desktop2.showinfo()
desktop3=desktop(6,6,6)
desktop3.showinfo()


class charactor:
    def __init__(self,name,score):
        self.name=name
        self.score=score
    def guess(self):
        array=['石头','剪刀','布']
        result=input('请猜拳')
        print(self.gamer,'玩家出',result)
        return result

class computer:
    def __init__(self,score):
        self.name = '计算机'
        self.score = score
    def guess(self):
        array = ['石头', '剪刀', '布']
        for i in range(1):
            print(self.gamer, '玩家出', random.randint(array))

p1=charactor('甲','0')
p2=computer('0')

class gameRules:
    def __init__(self,name,charactor,computer,times):
        self.name=name
        self.charactor=charactor
        self.computer=computer
        print('游戏开始，请双方出拳')
    def chuquan(self):
        charactor1.guess()
        result1=charactor1.guess()
        result2=charactor2.guess()
        finalResult = [result1, result2]
        return finalResult
    def cauclate(chuquan):
        if chuquan[0]==chuquan[1]:
            print('双方平手')
        elif chuquan[0]=='石头'and chuquan[1]=='布':
            print(charactor2.name,'胜')
        elif chuquan[0]=='石头'and chuquan[1]=='剪刀':
            print(charactor1.name,'胜')
        elif chuquan[0]=='剪刀'and chuquan[1]=='石头':
            print(charactor2.name,'胜')
        elif chuquan[0] == '剪刀' and chuquan[1] == '布':
            print(charactor1.name, '胜')
        elif chuquan[0]=='布'and chuquan[1]=='石头':
            print(charactor1.name,'胜')
        elif chuquan[0] == '布' and chuquan[1] == '剪刀':
            print(charactor2.name, '胜')
    def __del__(self):
        print('游戏结束',self.name,'启动自毁程序')

Kesuru=gameRules('不可名状之系统',p1,p2,1)
item=Kesuru.chuquan()
Kesuru.cauclate(item)



